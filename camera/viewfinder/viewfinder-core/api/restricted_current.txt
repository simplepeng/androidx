// Signature format: 4.0
package androidx.camera.viewfinder.core {

  public enum ImplementationMode {
    enum_constant public static final androidx.camera.viewfinder.core.ImplementationMode EMBEDDED;
    enum_constant public static final androidx.camera.viewfinder.core.ImplementationMode EXTERNAL;
    field public static final androidx.camera.viewfinder.core.ImplementationMode.Companion Companion;
  }

  public static final class ImplementationMode.Companion {
  }

  public enum ScaleType {
    enum_constant public static final androidx.camera.viewfinder.core.ScaleType FILL_CENTER;
    enum_constant public static final androidx.camera.viewfinder.core.ScaleType FILL_END;
    enum_constant public static final androidx.camera.viewfinder.core.ScaleType FILL_START;
    enum_constant public static final androidx.camera.viewfinder.core.ScaleType FIT_CENTER;
    enum_constant public static final androidx.camera.viewfinder.core.ScaleType FIT_END;
    enum_constant public static final androidx.camera.viewfinder.core.ScaleType FIT_START;
    field public static final androidx.camera.viewfinder.core.ScaleType.Companion Companion;
  }

  public static final class ScaleType.Companion {
  }

  public final class TransformationInfo {
    ctor public TransformationInfo(int sourceRotation, boolean isSourceMirroredHorizontally, boolean isSourceMirroredVertically, int cropRectLeft, int cropRectTop, int cropRectRight, int cropRectBottom);
    method public int getCropRectBottom();
    method public int getCropRectLeft();
    method public int getCropRectRight();
    method public int getCropRectTop();
    method public int getSourceRotation();
    method public boolean isSourceMirroredHorizontally();
    method public boolean isSourceMirroredVertically();
    property public final int cropRectBottom;
    property public final int cropRectLeft;
    property public final int cropRectRight;
    property public final int cropRectTop;
    property public final boolean isSourceMirroredHorizontally;
    property public final boolean isSourceMirroredVertically;
    property public final int sourceRotation;
  }

  public final class ViewfinderSurfaceRequest {
    method public androidx.camera.viewfinder.core.ImplementationMode? getImplementationMode();
    method public int getOutputMirrorMode();
    method public android.util.Size getResolution();
    method public int getSourceOrientation();
    method public suspend Object? getSurface(kotlin.coroutines.Continuation<? super android.view.Surface>);
    method public com.google.common.util.concurrent.ListenableFuture<android.view.Surface> getSurfaceAsync();
    method public void markSurfaceSafeToRelease();
    method public void provideSurface(android.view.Surface surface, java.util.concurrent.Executor executor, androidx.core.util.Consumer<androidx.camera.viewfinder.core.ViewfinderSurfaceRequest.Result?> resultListener);
    method public boolean willNotProvideSurface();
    property public final androidx.camera.viewfinder.core.ImplementationMode? implementationMode;
    property public final int outputMirrorMode;
    property public final android.util.Size resolution;
    property public final int sourceOrientation;
    field public static final androidx.camera.viewfinder.core.ViewfinderSurfaceRequest.Companion Companion;
    field public static final int MIRROR_MODE_HORIZONTAL = 1; // 0x1
    field public static final int MIRROR_MODE_NONE = 0; // 0x0
  }

  public static final class ViewfinderSurfaceRequest.Builder {
    ctor public ViewfinderSurfaceRequest.Builder(android.util.Size resolution);
    ctor public ViewfinderSurfaceRequest.Builder(androidx.camera.viewfinder.core.ViewfinderSurfaceRequest surfaceRequest);
    ctor public ViewfinderSurfaceRequest.Builder(androidx.camera.viewfinder.core.ViewfinderSurfaceRequest.Builder builder);
    method public androidx.camera.viewfinder.core.ViewfinderSurfaceRequest build();
    method public androidx.camera.viewfinder.core.ViewfinderSurfaceRequest.Builder setImplementationMode(androidx.camera.viewfinder.core.ImplementationMode? implementationMode);
    method public androidx.camera.viewfinder.core.ViewfinderSurfaceRequest.Builder setOutputMirrorMode(int outputMirrorMode);
    method public androidx.camera.viewfinder.core.ViewfinderSurfaceRequest.Builder setSourceOrientation(int sourceOrientation);
  }

  public static final class ViewfinderSurfaceRequest.Companion {
    property public static final int MIRROR_MODE_HORIZONTAL;
    property public static final int MIRROR_MODE_NONE;
  }

  @com.google.auto.value.AutoValue public static final class ViewfinderSurfaceRequest.Result {
    ctor public ViewfinderSurfaceRequest.Result(int code, android.view.Surface surface);
    method public int component1();
    method public android.view.Surface component2();
    method public androidx.camera.viewfinder.core.ViewfinderSurfaceRequest.Result copy(int code, android.view.Surface surface);
    method public int getCode();
    method public android.view.Surface getSurface();
    property public final int code;
    property public final android.view.Surface surface;
    field public static final androidx.camera.viewfinder.core.ViewfinderSurfaceRequest.Result.Companion Companion;
    field public static final int RESULT_INVALID_SURFACE = 2; // 0x2
    field public static final int RESULT_REQUEST_CANCELLED = 1; // 0x1
    field public static final int RESULT_SURFACE_ALREADY_PROVIDED = 3; // 0x3
    field public static final int RESULT_SURFACE_USED_SUCCESSFULLY = 0; // 0x0
    field public static final int RESULT_WILL_NOT_PROVIDE_SURFACE = 4; // 0x4
  }

  public static final class ViewfinderSurfaceRequest.Result.Companion {
    property public static final int RESULT_INVALID_SURFACE;
    property public static final int RESULT_REQUEST_CANCELLED;
    property public static final int RESULT_SURFACE_ALREADY_PROVIDED;
    property public static final int RESULT_SURFACE_USED_SUCCESSFULLY;
    property public static final int RESULT_WILL_NOT_PROVIDE_SURFACE;
  }

  public final class ViewfinderSurfaceRequestUtil {
    method public static androidx.camera.viewfinder.core.ViewfinderSurfaceRequest.Builder populateFromCharacteristics(androidx.camera.viewfinder.core.ViewfinderSurfaceRequest.Builder, android.hardware.camera2.CameraCharacteristics cameraCharacteristics);
  }

  public final class ZoomGestureDetector {
    ctor public ZoomGestureDetector(android.content.Context context, androidx.camera.viewfinder.core.ZoomGestureDetector.OnZoomGestureListener listener);
    ctor public ZoomGestureDetector(android.content.Context context, optional @Px int spanSlop, androidx.camera.viewfinder.core.ZoomGestureDetector.OnZoomGestureListener listener);
    ctor public ZoomGestureDetector(android.content.Context context, optional @Px int spanSlop, optional @Px int minSpan, androidx.camera.viewfinder.core.ZoomGestureDetector.OnZoomGestureListener listener);
    method public long getTimeDelta();
    method public boolean isQuickZoomEnabled();
    method public boolean isStylusZoomEnabled();
    method @UiThread public boolean onTouchEvent(android.view.MotionEvent event);
    method public void setQuickZoomEnabled(boolean);
    method public void setStylusZoomEnabled(boolean);
    property public final boolean isQuickZoomEnabled;
    property public final boolean isStylusZoomEnabled;
    property public final long timeDelta;
    field public static final androidx.camera.viewfinder.core.ZoomGestureDetector.Companion Companion;
  }

  public static final class ZoomGestureDetector.Companion {
  }

  public static fun interface ZoomGestureDetector.OnZoomGestureListener {
    method @UiThread public boolean onZoomEvent(androidx.camera.viewfinder.core.ZoomGestureDetector.ZoomEvent zoomEvent);
  }

  public abstract static class ZoomGestureDetector.ZoomEvent {
    method public final long getEventTime();
    method public final int getFocusX();
    method public final int getFocusY();
    property @IntRange(from=0L) public final long eventTime;
    property @IntRange(from=0L) @Px public final int focusX;
    property @IntRange(from=0L) @Px public final int focusY;
  }

  public static final class ZoomGestureDetector.ZoomEvent.Begin extends androidx.camera.viewfinder.core.ZoomGestureDetector.ZoomEvent {
    ctor public ZoomGestureDetector.ZoomEvent.Begin(@IntRange(from=0L) long eventTime, @IntRange(from=0L) @Px int focusX, @IntRange(from=0L) @Px int focusY);
  }

  public static final class ZoomGestureDetector.ZoomEvent.End extends androidx.camera.viewfinder.core.ZoomGestureDetector.ZoomEvent {
    ctor public ZoomGestureDetector.ZoomEvent.End(@IntRange(from=0L) long eventTime, @IntRange(from=0L) @Px int focusX, @IntRange(from=0L) @Px int focusY, @FloatRange(from=0.0, fromInclusive=false) float incrementalScaleFactor);
    method public float getIncrementalScaleFactor();
    property @FloatRange(from=0.0, fromInclusive=false) public final float incrementalScaleFactor;
  }

  public static final class ZoomGestureDetector.ZoomEvent.Move extends androidx.camera.viewfinder.core.ZoomGestureDetector.ZoomEvent {
    ctor public ZoomGestureDetector.ZoomEvent.Move(@IntRange(from=0L) long eventTime, @IntRange(from=0L) @Px int focusX, @IntRange(from=0L) @Px int focusY, @FloatRange(from=0.0, fromInclusive=false) float incrementalScaleFactor);
    method public float getIncrementalScaleFactor();
    property @FloatRange(from=0.0, fromInclusive=false) public final float incrementalScaleFactor;
  }

}

