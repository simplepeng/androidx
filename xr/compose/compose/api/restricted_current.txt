// Signature format: 4.0
package androidx.xr.compose.platform {

  public final class ActivityKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static void setSubspaceContent(androidx.activity.ComponentActivity, optional androidx.xr.scenecore.Session? session, optional boolean enableXrForTesting, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class LocalSessionKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.compose.runtime.ProvidableCompositionLocal<androidx.xr.scenecore.Session?> getLocalSession();
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final androidx.compose.runtime.ProvidableCompositionLocal<androidx.xr.scenecore.Session?> LocalSession;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class Logger {
    method public void init(android.content.Context context);
    method public void log(String tag, kotlin.jvm.functions.Function0<java.lang.String> messageGenerator);
    field public static final androidx.xr.compose.platform.Logger INSTANCE;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SceneManager implements java.lang.AutoCloseable {
    method public void close();
    method public java.util.List<androidx.xr.compose.subspace.node.SubspaceSemanticsNode> getAllRootSubspaceSemanticsNodes();
    method public int getSceneCount();
    method public void start();
    method public void stop();
    field public static final androidx.xr.compose.platform.SceneManager INSTANCE;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public fun interface SessionCallbackProvider {
    method public operator androidx.xr.compose.platform.SessionCallbacks get(androidx.xr.scenecore.Session session);
    field public static final androidx.xr.compose.platform.SessionCallbackProvider.Companion Companion;
  }

  public static final class SessionCallbackProvider.Companion {
    method public androidx.xr.compose.platform.SessionCallbackProvider getDefault();
    property public final androidx.xr.compose.platform.SessionCallbackProvider default;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SessionCallbacks {
    method public java.io.Closeable onBoundsChanged(kotlin.jvm.functions.Function1<? super androidx.xr.scenecore.Dimensions,kotlin.Unit> callback);
    method public java.io.Closeable onFullSpaceMode(kotlin.jvm.functions.Function0<kotlin.Unit> callback);
    method public java.io.Closeable onHomeSpaceMode(kotlin.jvm.functions.Function1<? super androidx.xr.scenecore.Dimensions,kotlin.Unit> callback);
    method public java.io.Closeable onSpaceModeChanged(kotlin.jvm.functions.Function1<? super androidx.xr.compose.platform.SpaceMode,kotlin.Unit> callback);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @kotlin.jvm.JvmInline public final value class SpaceMode {
    method public int getValue();
    property public final int value;
    field public static final androidx.xr.compose.platform.SpaceMode.Companion Companion;
  }

  public static final class SpaceMode.Companion {
    method public int getFull();
    method public int getHome();
    method public int getNotApplicable();
    method public int getUnspecified();
    property public final int Full;
    property public final int Home;
    property public final int NotApplicable;
    property public final int Unspecified;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SpatialCapabilities {
    method public boolean isAppEnvironmentEnabled();
    method public boolean isContent3dEnabled();
    method public boolean isPassthroughControlEnabled();
    method public boolean isSpatialAudioEnabled();
    method public boolean isSpatialUiEnabled();
    property public abstract boolean isAppEnvironmentEnabled;
    property public abstract boolean isContent3dEnabled;
    property public abstract boolean isPassthroughControlEnabled;
    property public abstract boolean isSpatialAudioEnabled;
    property public abstract boolean isSpatialUiEnabled;
    field public static final androidx.xr.compose.platform.SpatialCapabilities.Companion Companion;
  }

  public static final class SpatialCapabilities.Companion {
    method public androidx.xr.compose.platform.SpatialCapabilities getOrCreate(androidx.xr.scenecore.Session session);
  }

  public final class SpatialCapabilitiesKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.compose.runtime.CompositionLocal<androidx.xr.compose.platform.SpatialCapabilities> getLocalSpatialCapabilities();
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final androidx.compose.runtime.CompositionLocal<androidx.xr.compose.platform.SpatialCapabilities> LocalSpatialCapabilities;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SpatialConfiguration {
    method public default androidx.xr.compose.unit.DpVolumeSize getBounds();
    method public default boolean hasXrSpatialFeature();
    method public default void requestFullSpaceMode();
    method public default void requestHomeSpaceMode();
    property public default androidx.xr.compose.unit.DpVolumeSize bounds;
    property public default boolean hasXrSpatialFeature;
    field public static final androidx.xr.compose.platform.SpatialConfiguration.Companion Companion;
  }

  public static final class SpatialConfiguration.Companion {
    method public androidx.xr.compose.platform.SpatialConfiguration getOrCreate(androidx.xr.scenecore.Session session, boolean hasXrSpatialFeature);
    method public boolean hasXrSpatialFeature(android.content.Context context);
  }

  public final class SpatialConfigurationKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> getLocalHasXrSpatialFeature();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.compose.runtime.CompositionLocal<androidx.xr.compose.platform.SpatialConfiguration> getLocalSpatialConfiguration();
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> LocalHasXrSpatialFeature;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final androidx.compose.runtime.CompositionLocal<androidx.xr.compose.platform.SpatialConfiguration> LocalSpatialConfiguration;
  }

}

package androidx.xr.compose.spatial {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class EdgeOffset {
    method public androidx.xr.compose.spatial.EdgeOffset copy(optional float amount, optional int type);
    method public float getAmount();
    method public int getType();
    property public final float amount;
    property public final int type;
    field public static final androidx.xr.compose.spatial.EdgeOffset.Companion Companion;
  }

  public static final class EdgeOffset.Companion {
    method public androidx.xr.compose.spatial.EdgeOffset inner(float offset);
    method public androidx.xr.compose.spatial.EdgeOffset outer(float offset);
    method public androidx.xr.compose.spatial.EdgeOffset overlap(float offset);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class OrbiterDefaults {
    method public androidx.xr.compose.spatial.OrbiterSettings getOrbiterSettings();
    method public androidx.xr.compose.subspace.layout.SpatialShape getShape();
    property public final androidx.xr.compose.spatial.OrbiterSettings orbiterSettings;
    property public final androidx.xr.compose.subspace.layout.SpatialShape shape;
    field public static final androidx.xr.compose.spatial.OrbiterDefaults INSTANCE;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public sealed interface OrbiterEdge {
    field public static final androidx.xr.compose.spatial.OrbiterEdge.Companion Companion;
  }

  public static final class OrbiterEdge.Companion {
    method public int getBottom();
    method public int getEnd();
    method public int getStart();
    method public int getTop();
    property public final int Bottom;
    property public final int End;
    property public final int Start;
    property public final int Top;
  }

  @kotlin.jvm.JvmInline public static final value class OrbiterEdge.Horizontal implements androidx.xr.compose.spatial.OrbiterEdge {
    field public static final androidx.xr.compose.spatial.OrbiterEdge.Horizontal.Companion Companion;
  }

  public static final class OrbiterEdge.Horizontal.Companion {
    method public int getBottom();
    method public int getTop();
    property public final int Bottom;
    property public final int Top;
  }

  @kotlin.jvm.JvmInline public static final value class OrbiterEdge.Vertical implements androidx.xr.compose.spatial.OrbiterEdge {
    field public static final androidx.xr.compose.spatial.OrbiterEdge.Vertical.Companion Companion;
  }

  public static final class OrbiterEdge.Vertical.Companion {
    method public int getEnd();
    method public int getStart();
    property public final int End;
    property public final int Start;
  }

  public final class OrbiterKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable public static void Orbiter(int position, androidx.xr.compose.spatial.EdgeOffset offset, optional androidx.compose.ui.Alignment.Horizontal alignment, optional androidx.xr.compose.spatial.OrbiterSettings settings, optional androidx.xr.compose.subspace.layout.SpatialShape shape, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable public static void Orbiter(int position, androidx.xr.compose.spatial.EdgeOffset offset, optional androidx.compose.ui.Alignment.Vertical alignment, optional androidx.xr.compose.spatial.OrbiterSettings settings, optional androidx.xr.compose.subspace.layout.SpatialShape shape, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable public static void Orbiter(int position, optional float offset, optional androidx.compose.ui.Alignment.Horizontal alignment, optional androidx.xr.compose.spatial.OrbiterSettings settings, optional androidx.xr.compose.subspace.layout.SpatialShape shape, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable public static void Orbiter(int position, optional float offset, optional androidx.compose.ui.Alignment.Vertical alignment, optional androidx.xr.compose.spatial.OrbiterSettings settings, optional androidx.xr.compose.subspace.layout.SpatialShape shape, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @kotlin.jvm.JvmInline public final value class OrbiterOffsetType {
    field public static final androidx.xr.compose.spatial.OrbiterOffsetType.Companion Companion;
  }

  public static final class OrbiterOffsetType.Companion {
    method public int getInnerEdge();
    method public int getOuterEdge();
    property public final int InnerEdge;
    property public final int OuterEdge;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class OrbiterSettings {
    ctor public OrbiterSettings();
    ctor public OrbiterSettings(optional boolean shouldRenderInNonSpatial);
    method public androidx.xr.compose.spatial.OrbiterSettings copy(optional boolean shouldRenderInNonSpatial);
    method public boolean getShouldRenderInNonSpatial();
    property public final boolean shouldRenderInNonSpatial;
  }

  public final class SpatialDialogKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable public static void SpatialDialog(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, optional androidx.xr.compose.spatial.SpatialDialogProperties properties, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SpatialDialogProperties {
    ctor public SpatialDialogProperties();
    ctor public SpatialDialogProperties(optional boolean dismissOnBackPress, optional boolean dismissOnClickOutside, optional boolean usePlatformDefaultWidth, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> restingLevelAnimationSpec, optional float spatialElevationLevel);
    method public androidx.xr.compose.spatial.SpatialDialogProperties copy(optional boolean dismissOnBackPress, optional boolean dismissOnClickOutside, optional boolean usePlatformDefaultWidth, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> restingLevelAnimationSpec, optional float spatialElevationLevel);
    method public boolean getDismissOnBackPress();
    method public boolean getDismissOnClickOutside();
    method public androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> getRestingLevelAnimationSpec();
    method public float getSpatialElevationLevel();
    method public boolean getUsePlatformDefaultWidth();
    property public final boolean dismissOnBackPress;
    property public final boolean dismissOnClickOutside;
    property public final androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> restingLevelAnimationSpec;
    property public final float spatialElevationLevel;
    property public final boolean usePlatformDefaultWidth;
  }

  public final class SpatialElevationKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable public static void SpatialElevation(optional float spatialElevationLevel, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @kotlin.jvm.JvmInline public final value class SpatialElevationLevel {
    method public float getLevel();
    property public final float level;
    field public static final androidx.xr.compose.spatial.SpatialElevationLevel.Companion Companion;
  }

  public static final class SpatialElevationLevel.Companion {
    method public float getLevel0();
    method public float getLevel1();
    method public float getLevel2();
    method public float getLevel3();
    method public float getLevel4();
    method public float getLevel5();
    property public final float Level0;
    property public final float Level1;
    property public final float Level2;
    property public final float Level3;
    property public final float Level4;
    property public final float Level5;
  }

  public final class SpatialPopupKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable public static void SpatialPopup(optional androidx.compose.ui.Alignment alignment, optional long offset, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onDismissRequest, optional androidx.xr.compose.spatial.SpatialPopupProperties properties, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable public static void SpatialPopup(optional float spatialElevationLevel, kotlin.jvm.functions.Function1<? super kotlin.jvm.functions.Function1<? super androidx.compose.ui.layout.LayoutCoordinates,kotlin.Unit>,kotlin.Unit> content);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SpatialPopupProperties {
    ctor public SpatialPopupProperties();
    ctor public SpatialPopupProperties(optional boolean focusable, optional boolean dismissOnBackPress, optional boolean dismissOnClickOutside, optional boolean clippingEnabled, optional float spatialElevationLevel);
    method public androidx.xr.compose.spatial.SpatialPopupProperties copy(optional boolean focusable, optional boolean dismissOnBackPress, optional boolean dismissOnClickOutside, optional boolean clippingEnabled, optional float spatialElevationLevel);
    method public boolean getClippingEnabled();
    method public boolean getDismissOnBackPress();
    method public boolean getDismissOnClickOutside();
    method public boolean getFocusable();
    method public float getSpatialElevationLevel();
    property public final boolean clippingEnabled;
    property public final boolean dismissOnBackPress;
    property public final boolean dismissOnClickOutside;
    property public final boolean focusable;
    property public final float spatialElevationLevel;
  }

  public final class SubspaceKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable public static void Subspace(kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.SpatialBoxScope,kotlin.Unit> content);
  }

}

package androidx.xr.compose.subspace {

  public final class RememberComposeViewKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable public static androidx.compose.ui.platform.ComposeView rememberComposeView(kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class SpatialBoxKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialBox(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional androidx.xr.compose.subspace.layout.SpatialAlignment alignment, optional boolean propagateMinConstraints, optional String name, kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.SpatialBoxScope,kotlin.Unit> content);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.foundation.layout.LayoutScopeMarker public interface SpatialBoxScope {
    method public androidx.xr.compose.subspace.layout.SubspaceModifier align(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.compose.subspace.layout.SpatialAlignment alignment);
  }

  public final class SpatialColumnKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialColumn(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional androidx.xr.compose.subspace.layout.SpatialAlignment alignment, optional String name, kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.SpatialColumnScope,kotlin.Unit> content);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.foundation.layout.LayoutScopeMarker public interface SpatialColumnScope {
    method public androidx.xr.compose.subspace.layout.SubspaceModifier align(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.compose.subspace.layout.SpatialAlignment.Depth alignment);
    method public androidx.xr.compose.subspace.layout.SubspaceModifier align(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal alignment);
    method public androidx.xr.compose.subspace.layout.SubspaceModifier weight(androidx.xr.compose.subspace.layout.SubspaceModifier, @FloatRange(from=0.0, fromInclusive=false) float weight, optional boolean fill);
  }

  public final class SpatialLayoutSpacerKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialLayoutSpacer(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialLayoutSpacer(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional String name);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SpatialPanelDefaults {
    method public androidx.xr.compose.subspace.layout.SpatialShape getShape();
    property public final androidx.xr.compose.subspace.layout.SpatialShape shape;
    field public static final androidx.xr.compose.subspace.SpatialPanelDefaults INSTANCE;
  }

  public final class SpatialPanelKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void MainPanel(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional androidx.xr.compose.subspace.layout.SpatialShape shape);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialPanel(android.content.Intent intent, optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional String name, optional androidx.xr.compose.subspace.layout.SpatialShape shape);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialPanel(android.view.View view, optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional String name, optional androidx.xr.compose.subspace.layout.SpatialShape shape);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialPanel(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional String name, optional androidx.xr.compose.subspace.layout.SpatialShape shape, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class SpatialRowKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SpatialRow(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional androidx.xr.compose.subspace.layout.SpatialAlignment alignment, optional float curveRadius, optional String name, kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.SpatialRowScope,kotlin.Unit> content);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.foundation.layout.LayoutScopeMarker public interface SpatialRowScope {
    method public androidx.xr.compose.subspace.layout.SubspaceModifier align(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.compose.subspace.layout.SpatialAlignment.Depth alignment);
    method public androidx.xr.compose.subspace.layout.SubspaceModifier align(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.compose.subspace.layout.SpatialAlignment.Vertical alignment);
    method public androidx.xr.compose.subspace.layout.SubspaceModifier weight(androidx.xr.compose.subspace.layout.SubspaceModifier, @FloatRange(from=0.0, fromInclusive=false) float weight, optional boolean fill);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.ComposableTargetMarker(description="Subspace Composable") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.FILE, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.TYPE, kotlin.annotation.AnnotationTarget.TYPE_PARAMETER}) public @interface SubspaceComposable {
  }

  public final class VolumeKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void Volume(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional String name, kotlin.jvm.functions.Function1<? super androidx.xr.scenecore.Entity,kotlin.Unit> onVolumeEntity);
  }

}

package androidx.xr.compose.subspace.layout {

  public final class AlphaKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier alpha(androidx.xr.compose.subspace.layout.SubspaceModifier, @FloatRange(from=0.0, to=1.0) float alpha);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class CombinedSubspaceModifier implements androidx.xr.compose.subspace.layout.SubspaceModifier {
    ctor public CombinedSubspaceModifier(androidx.xr.compose.subspace.layout.SubspaceModifier outer, androidx.xr.compose.subspace.layout.SubspaceModifier inner);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Measurable {
    method public void adjustParams(androidx.xr.compose.subspace.layout.ParentLayoutParamsAdjustable params);
    method public androidx.xr.compose.subspace.layout.Placeable measure(androidx.xr.compose.unit.VolumeConstraints constraints);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public fun interface MeasurePolicy {
    method public androidx.xr.compose.subspace.layout.MeasureResult measure(androidx.xr.compose.subspace.layout.MeasureScope, java.util.List<? extends androidx.xr.compose.subspace.layout.Measurable> measurables, androidx.xr.compose.unit.VolumeConstraints constraints);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface MeasureResult {
    method public int getDepth();
    method public int getHeight();
    method public int getWidth();
    method public void placeChildren(androidx.xr.compose.subspace.layout.Placeable.PlacementScope placementScope);
    property public abstract int depth;
    property public abstract int height;
    property public abstract int width;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface MeasureScope extends androidx.compose.ui.unit.Density {
    method public default float getDensity();
    method public default float getFontScale();
    method public default androidx.xr.compose.subspace.layout.MeasureResult layout(int width, int height, int depth, kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.layout.Placeable.PlacementScope,kotlin.Unit> placementBlock);
    property public default float density;
    property public default float fontScale;
  }

  public final class MovableKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier movable(androidx.xr.compose.subspace.layout.SubspaceModifier, optional boolean enabled, optional boolean stickyPose, optional kotlin.jvm.functions.Function1<? super androidx.xr.runtime.math.Pose,java.lang.Boolean> onPoseChange);
  }

  public final class OffsetKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier offset(androidx.xr.compose.subspace.layout.SubspaceModifier, optional float x, optional float y, optional float z);
  }

  public final class OnGloballyPositionedModifierKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier onGloballyPositioned(androidx.xr.compose.subspace.layout.SubspaceModifier, kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.layout.SubspaceLayoutCoordinates,kotlin.Unit> onGloballyPositioned);
  }

  public final class PaddingKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier padding(androidx.xr.compose.subspace.layout.SubspaceModifier, float all);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier padding(androidx.xr.compose.subspace.layout.SubspaceModifier, optional float horizontal, optional float vertical, optional float depth);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier padding(androidx.xr.compose.subspace.layout.SubspaceModifier, optional float left, optional float top, optional float right, optional float bottom, optional float front, optional float back);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ParentLayoutParamsAdjustable {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ParentLayoutParamsModifier {
    method public void adjustParams(androidx.xr.compose.subspace.layout.ParentLayoutParamsAdjustable params);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract class Placeable {
    ctor public Placeable();
    method public final int getMeasuredDepth();
    method public final int getMeasuredHeight();
    method public final int getMeasuredWidth();
    method protected abstract void placeAt(androidx.xr.runtime.math.Pose pose);
    method public final void setMeasuredDepth(int);
    method public final void setMeasuredHeight(int);
    method public final void setMeasuredWidth(int);
    property public final int measuredDepth;
    property public final int measuredHeight;
    property public final int measuredWidth;
  }

  public abstract static class Placeable.PlacementScope {
    ctor public Placeable.PlacementScope();
    method public androidx.xr.compose.subspace.layout.SubspaceLayoutCoordinates? getCoordinates();
    method public final void place(androidx.xr.compose.subspace.layout.Placeable, androidx.xr.runtime.math.Pose pose);
    property public androidx.xr.compose.subspace.layout.SubspaceLayoutCoordinates? coordinates;
  }

  public final class ResizableKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier resizable(androidx.xr.compose.subspace.layout.SubspaceModifier, optional boolean enabled, optional androidx.xr.compose.unit.DpVolumeSize minimumSize, optional androidx.xr.compose.unit.DpVolumeSize maximumSize, optional boolean maintainAspectRatio, optional kotlin.jvm.functions.Function1<? super androidx.xr.compose.unit.IntVolumeSize,java.lang.Boolean> onSizeChange);
  }

  public final class RotateKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier rotate(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.runtime.math.Quaternion quaternion);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier rotate(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.runtime.math.Vector3 axisAngle, float rotation);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier rotate(androidx.xr.compose.subspace.layout.SubspaceModifier, float pitch, float yaw, float roll);
  }

  public final class ScaleKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier scale(androidx.xr.compose.subspace.layout.SubspaceModifier, float scale);
  }

  public final class SemanticsModifierKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier semantics(androidx.xr.compose.subspace.layout.SubspaceModifier, kotlin.jvm.functions.Function1<? super androidx.compose.ui.semantics.SemanticsPropertyReceiver,kotlin.Unit> properties);
  }

  public final class SizeKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier depth(androidx.xr.compose.subspace.layout.SubspaceModifier, float depth);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier fillMaxDepth(androidx.xr.compose.subspace.layout.SubspaceModifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier fillMaxHeight(androidx.xr.compose.subspace.layout.SubspaceModifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier fillMaxSize(androidx.xr.compose.subspace.layout.SubspaceModifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier fillMaxWidth(androidx.xr.compose.subspace.layout.SubspaceModifier, optional @FloatRange(from=0.0, to=1.0) float fraction);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier height(androidx.xr.compose.subspace.layout.SubspaceModifier, float height);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier requiredDepth(androidx.xr.compose.subspace.layout.SubspaceModifier, float depth);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier requiredHeight(androidx.xr.compose.subspace.layout.SubspaceModifier, float height);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier requiredSize(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.compose.unit.DpVolumeSize size);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier requiredSize(androidx.xr.compose.subspace.layout.SubspaceModifier, float size);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier requiredWidth(androidx.xr.compose.subspace.layout.SubspaceModifier, float width);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier size(androidx.xr.compose.subspace.layout.SubspaceModifier, androidx.xr.compose.unit.DpVolumeSize size);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier size(androidx.xr.compose.subspace.layout.SubspaceModifier, float size);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier width(androidx.xr.compose.subspace.layout.SubspaceModifier, float width);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SpatialAlignment {
    method public int depthOffset(int depth, int space);
    method public static androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Depth getBack();
    method public static androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Vertical getBottom();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getBottomCenter();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getBottomLeft();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getBottomRight();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getCenter();
    method public static androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Depth getCenterDepthwise();
    method public static androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Horizontal getCenterHorizontally();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getCenterLeft();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getCenterRight();
    method public static androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Vertical getCenterVertically();
    method public static androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Depth getFront();
    method public static androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Horizontal getLeft();
    method public static androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Horizontal getRight();
    method public static androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Vertical getTop();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getTopCenter();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getTopLeft();
    method public static androidx.xr.compose.subspace.layout.SpatialAlignment getTopRight();
    method public int horizontalOffset(int width, int space);
    method public androidx.xr.runtime.math.Vector3 position(androidx.xr.compose.unit.IntVolumeSize size, androidx.xr.compose.unit.IntVolumeSize space);
    method public int verticalOffset(int height, int space);
    field public static final androidx.xr.compose.subspace.layout.SpatialAlignment.Companion Companion;
  }

  public static final class SpatialAlignment.Companion {
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Depth getBack();
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Vertical getBottom();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getBottomCenter();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getBottomLeft();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getBottomRight();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getCenter();
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Depth getCenterDepthwise();
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Horizontal getCenterHorizontally();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getCenterLeft();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getCenterRight();
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Vertical getCenterVertically();
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Depth getFront();
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Horizontal getLeft();
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Horizontal getRight();
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Vertical getTop();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getTopCenter();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getTopLeft();
    method public androidx.xr.compose.subspace.layout.SpatialAlignment getTopRight();
    property public final androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Depth Back;
    property public final androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Vertical Bottom;
    property public final androidx.xr.compose.subspace.layout.SpatialAlignment BottomCenter;
    property public final androidx.xr.compose.subspace.layout.SpatialAlignment BottomLeft;
    property public final androidx.xr.compose.subspace.layout.SpatialAlignment BottomRight;
    property public final androidx.xr.compose.subspace.layout.SpatialAlignment Center;
    property public final androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Depth CenterDepthwise;
    property public final androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Horizontal CenterHorizontally;
    property public final androidx.xr.compose.subspace.layout.SpatialAlignment CenterLeft;
    property public final androidx.xr.compose.subspace.layout.SpatialAlignment CenterRight;
    property public final androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Vertical CenterVertically;
    property public final androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Depth Front;
    property public final androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Horizontal Left;
    property public final androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Horizontal Right;
    property public final androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Vertical Top;
    property public final androidx.xr.compose.subspace.layout.SpatialAlignment TopCenter;
    property public final androidx.xr.compose.subspace.layout.SpatialAlignment TopLeft;
    property public final androidx.xr.compose.subspace.layout.SpatialAlignment TopRight;
  }

  public static interface SpatialAlignment.Depth {
    method public int offset(int depth, int space);
  }

  public static interface SpatialAlignment.Horizontal {
    method public int offset(int width, int space);
  }

  public static interface SpatialAlignment.Vertical {
    method public int offset(int height, int space);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SpatialBiasAlignment implements androidx.xr.compose.subspace.layout.SpatialAlignment {
    ctor public SpatialBiasAlignment(float horizontalBias, float verticalBias, float depthBias);
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment copy(optional float horizontalBias, optional float verticalBias, optional float depthBias);
    method public int depthOffset(int depth, int space);
    method public float getDepthBias();
    method public float getHorizontalBias();
    method public float getVerticalBias();
    method public int horizontalOffset(int width, int space);
    method public androidx.xr.runtime.math.Vector3 position(androidx.xr.compose.unit.IntVolumeSize size, androidx.xr.compose.unit.IntVolumeSize space);
    method public int verticalOffset(int height, int space);
    property public final float depthBias;
    property public final float horizontalBias;
    property public final float verticalBias;
    field public static final androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Companion Companion;
  }

  public static final class SpatialBiasAlignment.Companion {
  }

  public static final class SpatialBiasAlignment.Depth implements androidx.xr.compose.subspace.layout.SpatialAlignment.Depth {
    ctor public SpatialBiasAlignment.Depth(float bias);
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Depth copy(optional float bias);
    method public float getBias();
    method public int offset(int depth, int space);
    property public final float bias;
  }

  public static final class SpatialBiasAlignment.Horizontal implements androidx.xr.compose.subspace.layout.SpatialAlignment.Horizontal {
    ctor public SpatialBiasAlignment.Horizontal(float bias);
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Horizontal copy(optional float bias);
    method public float getBias();
    method public int offset(int width, int space);
    property public final float bias;
  }

  public static final class SpatialBiasAlignment.Vertical implements androidx.xr.compose.subspace.layout.SpatialAlignment.Vertical {
    ctor public SpatialBiasAlignment.Vertical(float bias);
    method public androidx.xr.compose.subspace.layout.SpatialBiasAlignment.Vertical copy(optional float bias);
    method public float getBias();
    method public int offset(int height, int space);
    property public final float bias;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SpatialRoundedCornerShape extends androidx.xr.compose.subspace.layout.SpatialShape {
    ctor public SpatialRoundedCornerShape(androidx.compose.foundation.shape.CornerSize size);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract class SpatialShape {
    ctor public SpatialShape();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SubspaceLayoutCoordinates {
    method public androidx.xr.runtime.math.Pose getPose();
    method public androidx.xr.runtime.math.Pose getPoseInParentEntity();
    method public androidx.xr.runtime.math.Pose getPoseInRoot();
    method @Deprecated public default androidx.xr.runtime.math.Vector3 getPosition();
    method @Deprecated public default androidx.xr.runtime.math.Vector3 getPositionInParentEntity();
    method @Deprecated public default androidx.xr.runtime.math.Vector3 getPositionInRoot();
    method @Deprecated public default androidx.xr.runtime.math.Quaternion getRotation();
    method @Deprecated public default androidx.xr.runtime.math.Quaternion getRotationInParentEntity();
    method @Deprecated public default androidx.xr.runtime.math.Quaternion getRotationInRoot();
    method public androidx.xr.compose.unit.IntVolumeSize getSize();
    property public abstract androidx.xr.runtime.math.Pose pose;
    property public abstract androidx.xr.runtime.math.Pose poseInParentEntity;
    property public abstract androidx.xr.runtime.math.Pose poseInRoot;
    property @Deprecated public default androidx.xr.runtime.math.Vector3 position;
    property @Deprecated public default androidx.xr.runtime.math.Vector3 positionInParentEntity;
    property @Deprecated public default androidx.xr.runtime.math.Vector3 positionInRoot;
    property @Deprecated public default androidx.xr.runtime.math.Quaternion rotation;
    property @Deprecated public default androidx.xr.runtime.math.Quaternion rotationInParentEntity;
    property @Deprecated public default androidx.xr.runtime.math.Quaternion rotationInRoot;
    property public abstract androidx.xr.compose.unit.IntVolumeSize size;
  }

  public final class SubspaceLayoutCoordinatesKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static String toDebugString(androidx.xr.compose.subspace.layout.SubspaceLayoutCoordinates);
  }

  public final class SubspaceLayoutKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SubspaceLayout(optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional String name, androidx.xr.compose.subspace.layout.MeasurePolicy measurePolicy);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.compose.runtime.Composable @androidx.xr.compose.subspace.SubspaceComposable public static void SubspaceLayout(kotlin.jvm.functions.Function0<kotlin.Unit> content, optional androidx.xr.compose.subspace.layout.SubspaceModifier modifier, optional String name, androidx.xr.compose.subspace.layout.MeasurePolicy measurePolicy);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static String defaultSubspaceLayoutName();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SubspaceModifier {
    method public default boolean all(kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.node.SubspaceModifierElement<androidx.xr.compose.subspace.layout.SubspaceModifier.Node>,java.lang.Boolean> predicate);
    method public default boolean any(kotlin.jvm.functions.Function1<? super androidx.xr.compose.subspace.node.SubspaceModifierElement<androidx.xr.compose.subspace.layout.SubspaceModifier.Node>,java.lang.Boolean> predicate);
    method public default <R> R foldIn(R initial, kotlin.jvm.functions.Function2<? super R,? super androidx.xr.compose.subspace.node.SubspaceModifierElement<androidx.xr.compose.subspace.layout.SubspaceModifier.Node>,? extends R> operation);
    method public default <R> R foldOut(R initial, kotlin.jvm.functions.Function2<? super androidx.xr.compose.subspace.node.SubspaceModifierElement<androidx.xr.compose.subspace.layout.SubspaceModifier.Node>,? super R,? extends R> operation);
    method public default infix androidx.xr.compose.subspace.layout.SubspaceModifier then(androidx.xr.compose.subspace.layout.SubspaceModifier other);
    field public static final androidx.xr.compose.subspace.layout.SubspaceModifier.Companion Companion;
  }

  public static final class SubspaceModifier.Companion implements androidx.xr.compose.subspace.layout.SubspaceModifier {
    method public infix androidx.xr.compose.subspace.layout.SubspaceModifier then(androidx.xr.compose.subspace.node.SubspaceModifierElement<androidx.xr.compose.subspace.layout.SubspaceModifier.Node> other);
  }

  public abstract static class SubspaceModifier.Node {
    ctor public SubspaceModifier.Node();
  }

  public final class SubspaceModifierKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static kotlin.sequences.Sequence<androidx.xr.compose.subspace.layout.SubspaceModifier.Node> traverseAncestors(androidx.xr.compose.subspace.layout.SubspaceModifier.Node);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static kotlin.sequences.Sequence<androidx.xr.compose.subspace.layout.SubspaceModifier.Node> traverseDescendants(androidx.xr.compose.subspace.layout.SubspaceModifier.Node);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static kotlin.sequences.Sequence<androidx.xr.compose.subspace.layout.SubspaceModifier.Node> traverseSelfThenAncestors(androidx.xr.compose.subspace.layout.SubspaceModifier.Node);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static kotlin.sequences.Sequence<androidx.xr.compose.subspace.layout.SubspaceModifier.Node> traverseSelfThenDescendants(androidx.xr.compose.subspace.layout.SubspaceModifier.Node);
  }

  public final class TestTagKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.xr.compose.subspace.layout.SubspaceModifier testTag(androidx.xr.compose.subspace.layout.SubspaceModifier, String tag);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class TestTagNode extends androidx.xr.compose.subspace.layout.SubspaceModifier.Node implements androidx.xr.compose.subspace.node.SubspaceSemanticsModifierNode {
    ctor public TestTagNode(String tag);
    method public void applySemantics(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public String getTag();
    method public void setTag(String);
    property public final String tag;
  }

}

package androidx.xr.compose.subspace.node {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SubspaceLayoutModifierNode {
    method public androidx.xr.compose.subspace.layout.MeasureResult measure(androidx.xr.compose.subspace.layout.MeasureScope, androidx.xr.compose.subspace.layout.Measurable measurable, androidx.xr.compose.unit.VolumeConstraints constraints);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract class SubspaceModifierElement<N extends androidx.xr.compose.subspace.layout.SubspaceModifier.Node> implements androidx.xr.compose.subspace.layout.SubspaceModifier {
    ctor public SubspaceModifierElement();
    method public abstract N create();
    method public abstract boolean equals(Object? other);
    method public abstract int hashCode();
    method public abstract void update(N node);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SubspaceSemanticsModifierNode {
    method public void applySemantics(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SubspaceSemanticsNode {
    method public java.util.List<androidx.xr.compose.subspace.node.SubspaceSemanticsNode> getChildren();
    method public java.util.List<androidx.xr.scenecore.Component>? getComponents();
    method public androidx.compose.ui.semantics.SemanticsConfiguration getConfig();
    method public int getId();
    method public androidx.xr.compose.subspace.node.SubspaceSemanticsNode? getParent();
    method public androidx.xr.runtime.math.Vector3 getPosition();
    method public androidx.xr.runtime.math.Vector3 getPositionInRoot();
    method public androidx.xr.runtime.math.Quaternion getRotation();
    method public androidx.xr.runtime.math.Quaternion getRotationInRoot();
    method public float getScale();
    method public androidx.xr.compose.unit.IntVolumeSize getSize();
    method public boolean isRoot();
    property public final java.util.List<androidx.xr.compose.subspace.node.SubspaceSemanticsNode> children;
    property public final java.util.List<androidx.xr.scenecore.Component>? components;
    property public final androidx.compose.ui.semantics.SemanticsConfiguration config;
    property public final int id;
    property public final boolean isRoot;
    property public final androidx.xr.compose.subspace.node.SubspaceSemanticsNode? parent;
    property public final androidx.xr.runtime.math.Vector3 position;
    property public final androidx.xr.runtime.math.Vector3 positionInRoot;
    property public final androidx.xr.runtime.math.Quaternion rotation;
    property public final androidx.xr.runtime.math.Quaternion rotationInRoot;
    property public final float scale;
    property public final androidx.xr.compose.unit.IntVolumeSize size;
  }

}

package androidx.xr.compose.unit {

  public final class DpVolumeSize {
    ctor public DpVolumeSize(float width, float height, float depth);
    method public float getDepth();
    method public float getHeight();
    method public float getWidth();
    property public final float depth;
    property public final float height;
    property public final float width;
    field public static final androidx.xr.compose.unit.DpVolumeSize.Companion Companion;
  }

  public static final class DpVolumeSize.Companion {
    method public androidx.xr.compose.unit.DpVolumeSize getZero();
    property public final androidx.xr.compose.unit.DpVolumeSize Zero;
  }

  public final class IntVolumeSize {
    ctor public IntVolumeSize(int width, int height, int depth);
    method public int getDepth();
    method public int getHeight();
    method public int getWidth();
    property public final int depth;
    property public final int height;
    property public final int width;
    field public static final androidx.xr.compose.unit.IntVolumeSize.Companion Companion;
  }

  public static final class IntVolumeSize.Companion {
    method public androidx.xr.compose.unit.IntVolumeSize getZero();
    property public final androidx.xr.compose.unit.IntVolumeSize Zero;
  }

  @androidx.compose.runtime.Immutable @kotlin.jvm.JvmInline public final value class Meter implements java.lang.Comparable<androidx.xr.compose.unit.Meter> {
    ctor public Meter(float value);
    method public int compareTo(float other);
    method public inline operator float div(double other);
    method public inline operator float div(float other);
    method public inline operator float div(int other);
    method public float getValue();
    method public inline operator float minus(float other);
    method public inline operator float plus(float other);
    method public inline int roundToPx(androidx.compose.ui.unit.Density density);
    method public inline operator float times(double other);
    method public inline operator float times(float other);
    method public inline operator float times(int other);
    method public inline float toCm();
    method public inline float toDp();
    method public inline float toM();
    method public inline float toMm();
    method public inline float toPx(androidx.compose.ui.unit.Density density);
    property public final inline boolean isFinite;
    property public final inline boolean isSpecified;
    property public final float value;
    field public static final androidx.xr.compose.unit.Meter.Companion Companion;
    field @kotlin.PublishedApi internal static final float DP_PER_METER;
  }

  public static final class Meter.Companion {
    method public inline float fromPixel(float px, androidx.compose.ui.unit.Density density);
    method public float getCentimeters(double);
    method public float getCentimeters(float);
    method public float getCentimeters(int);
    method public float getInfinity();
    method public float getMeters(double);
    method public float getMeters(float);
    method public float getMeters(int);
    method public float getMillimeters(double);
    method public float getMillimeters(float);
    method public float getMillimeters(int);
    method public float getNaN();
    property @kotlin.PublishedApi internal final float DP_PER_METER;
    property public final float Infinity;
    property public final float NaN;
    property public final float centimeters;
    property public final float centimeters;
    property public final float centimeters;
    property public final float meters;
    property public final float meters;
    property public final float meters;
    property public final float millimeters;
    property public final float millimeters;
    property public final float millimeters;
  }

  public final class MeterKt {
    method public static inline operator float div(double, float other);
    method public static inline operator float div(float, float other);
    method public static inline operator float div(int, float other);
    method public static inline operator float times(double, float other);
    method public static inline operator float times(float, float other);
    method public static inline operator float times(int, float other);
    method public static inline float toMeter(float);
  }

  public final class VolumeConstraints {
    ctor public VolumeConstraints(int minWidth, int maxWidth, int minHeight, int maxHeight, optional int minDepth, optional int maxDepth);
    method public androidx.xr.compose.unit.VolumeConstraints copy(optional int minWidth, optional int maxWidth, optional int minHeight, optional int maxHeight, optional int minDepth, optional int maxDepth);
    method public int getMaxDepth();
    method public int getMaxHeight();
    method public int getMaxWidth();
    method public int getMinDepth();
    method public int getMinHeight();
    method public int getMinWidth();
    method public boolean hasBoundedDepth();
    method public boolean hasBoundedHeight();
    method public boolean hasBoundedWidth();
    property public final boolean hasBoundedDepth;
    property public final boolean hasBoundedHeight;
    property public final boolean hasBoundedWidth;
    property public final int maxDepth;
    property public final int maxHeight;
    property public final int maxWidth;
    property public final int minDepth;
    property public final int minHeight;
    property public final int minWidth;
    field public static final androidx.xr.compose.unit.VolumeConstraints.Companion Companion;
    field public static final int INFINITY = 2147483647; // 0x7fffffff
  }

  public static final class VolumeConstraints.Companion {
    property public static final int INFINITY;
  }

  public final class VolumeConstraintsKt {
    method public static androidx.xr.compose.unit.VolumeConstraints constrain(androidx.xr.compose.unit.VolumeConstraints, androidx.xr.compose.unit.VolumeConstraints otherConstraints);
    method public static int constrainDepth(androidx.xr.compose.unit.VolumeConstraints, int depth);
    method public static int constrainHeight(androidx.xr.compose.unit.VolumeConstraints, int height);
    method public static int constrainWidth(androidx.xr.compose.unit.VolumeConstraints, int width);
    method public static androidx.xr.compose.unit.VolumeConstraints offset(androidx.xr.compose.unit.VolumeConstraints, optional int horizontal, optional int vertical, optional int depth, optional boolean resetMins);
  }

}

