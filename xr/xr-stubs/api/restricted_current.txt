// Signature format: 4.0
package com.android.extensions.xr {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class Config {
    method public float defaultPixelsPerMeter(float);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class XrExtensionResult {
    method public int getResult();
    field @Deprecated public static final int XR_RESULT_ERROR_IGNORED = 3; // 0x3
    field @Deprecated public static final int XR_RESULT_ERROR_INVALID_STATE = 2; // 0x2
    field public static final int XR_RESULT_ERROR_NOT_ALLOWED = 3; // 0x3
    field public static final int XR_RESULT_ERROR_SYSTEM = 4; // 0x4
    field public static final int XR_RESULT_IGNORED_ALREADY_APPLIED = 2; // 0x2
    field public static final int XR_RESULT_SUCCESS = 0; // 0x0
    field public static final int XR_RESULT_SUCCESS_NOT_VISIBLE = 1; // 0x1
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class XrExtensions {
    ctor public XrExtensions();
    method public void addFindableView(android.view.View!, android.view.ViewGroup!);
    method @Deprecated public void attachSpatialEnvironment(android.app.Activity!, com.android.extensions.xr.node.Node!);
    method public void attachSpatialEnvironment(android.app.Activity!, com.android.extensions.xr.node.Node!, com.android.extensions.xr.function.Consumer<com.android.extensions.xr.XrExtensionResult!>!, java.util.concurrent.Executor!);
    method @Deprecated public void attachSpatialScene(android.app.Activity!, com.android.extensions.xr.node.Node!, com.android.extensions.xr.node.Node!);
    method public void attachSpatialScene(android.app.Activity!, com.android.extensions.xr.node.Node!, com.android.extensions.xr.node.Node!, com.android.extensions.xr.function.Consumer<com.android.extensions.xr.XrExtensionResult!>!, java.util.concurrent.Executor!);
    method @Deprecated public boolean canEmbedActivityPanel(android.app.Activity!);
    method public void clearSpatialStateCallback(android.app.Activity!);
    method public com.android.extensions.xr.space.ActivityPanel! createActivityPanel(android.app.Activity!, com.android.extensions.xr.space.ActivityPanelLaunchParameters!);
    method public com.android.extensions.xr.node.Node! createNode();
    method public com.android.extensions.xr.node.NodeTransaction! createNodeTransaction();
    method public com.android.extensions.xr.node.ReformOptions! createReformOptions(com.android.extensions.xr.function.Consumer<com.android.extensions.xr.node.ReformEvent!>!, java.util.concurrent.Executor!);
    method public com.android.extensions.xr.splitengine.SplitEngineBridge! createSplitEngineBridge();
    method public com.android.extensions.xr.subspace.Subspace! createSubspace(com.android.extensions.xr.splitengine.SplitEngineBridge!, int);
    method @Deprecated public void detachSpatialEnvironment(android.app.Activity!);
    method public void detachSpatialEnvironment(android.app.Activity!, com.android.extensions.xr.function.Consumer<com.android.extensions.xr.XrExtensionResult!>!, java.util.concurrent.Executor!);
    method @Deprecated public void detachSpatialScene(android.app.Activity!);
    method public void detachSpatialScene(android.app.Activity!, com.android.extensions.xr.function.Consumer<com.android.extensions.xr.XrExtensionResult!>!, java.util.concurrent.Executor!);
    method @Deprecated public java.util.concurrent.CompletableFuture<com.android.extensions.xr.XrExtensions.SceneViewerResult!>! displayGltfModel(android.app.Activity!, com.android.extensions.xr.asset.GltfModelToken!);
    method public int getApiVersion();
    method @Deprecated public void getBounds(android.app.Activity!, com.android.extensions.xr.function.Consumer<com.android.extensions.xr.space.Bounds!>!, java.util.concurrent.Executor!);
    method public com.android.extensions.xr.Config! getConfig();
    method public int getOpenXrWorldReferenceSpaceType();
    method @Deprecated public void getSpatialCapabilities(android.app.Activity!, com.android.extensions.xr.function.Consumer<com.android.extensions.xr.space.SpatialCapabilities!>!, java.util.concurrent.Executor!);
    method public com.android.extensions.xr.space.SpatialState! getSpatialState(android.app.Activity!);
    method public com.android.extensions.xr.node.Node! getSurfaceTrackingNode(android.view.View!);
    method public com.android.extensions.xr.media.XrSpatialAudioExtensions! getXrSpatialAudioExtensions();
    method public void hitTest(android.app.Activity!, com.android.extensions.xr.node.Vec3!, com.android.extensions.xr.node.Vec3!, com.android.extensions.xr.function.Consumer<com.android.extensions.xr.space.HitTestResult!>!, java.util.concurrent.Executor!);
    method @Deprecated public java.util.concurrent.CompletableFuture<com.android.extensions.xr.asset.EnvironmentToken!>! loadEnvironment(java.io.InputStream!, int, int, String!);
    method @Deprecated public java.util.concurrent.CompletableFuture<com.android.extensions.xr.asset.EnvironmentToken!>! loadEnvironment(java.io.InputStream!, int, int, String!, int, int);
    method @Deprecated public java.util.concurrent.CompletableFuture<com.android.extensions.xr.asset.GltfModelToken!>! loadGltfModel(java.io.InputStream!, int, int, String!);
    method @Deprecated public java.util.concurrent.CompletableFuture<com.android.extensions.xr.asset.SceneToken!>! loadImpressScene(java.io.InputStream!, int, int);
    method public void removeFindableView(android.view.View!, android.view.ViewGroup!);
    method @Deprecated public boolean requestFullSpaceMode(android.app.Activity!);
    method public void requestFullSpaceMode(android.app.Activity!, boolean, com.android.extensions.xr.function.Consumer<com.android.extensions.xr.XrExtensionResult!>!, java.util.concurrent.Executor!);
    method @Deprecated public boolean requestHomeSpaceMode(android.app.Activity!);
    method public android.os.Bundle! setFullSpaceStartMode(android.os.Bundle!);
    method public android.os.Bundle! setFullSpaceStartModeWithEnvironmentInherited(android.os.Bundle!);
    method @Deprecated public android.os.Bundle! setMainPanelCurvatureRadius(android.os.Bundle!, float);
    method @Deprecated public void setMainWindowCurvatureRadius(android.app.Activity!, float);
    method @Deprecated public void setMainWindowSize(android.app.Activity!, int, int);
    method public void setMainWindowSize(android.app.Activity!, int, int, com.android.extensions.xr.function.Consumer<com.android.extensions.xr.XrExtensionResult!>!, java.util.concurrent.Executor!);
    method @Deprecated public void setPreferredAspectRatio(android.app.Activity!, float);
    method public void setPreferredAspectRatio(android.app.Activity!, float, com.android.extensions.xr.function.Consumer<com.android.extensions.xr.XrExtensionResult!>!, java.util.concurrent.Executor!);
    method public void setSpatialStateCallback(android.app.Activity!, com.android.extensions.xr.function.Consumer<com.android.extensions.xr.space.SpatialState!>!, java.util.concurrent.Executor!);
    method @Deprecated public void setSpatialStateCallbackDeprecated(android.app.Activity!, com.android.extensions.xr.function.Consumer<com.android.extensions.xr.space.SpatialStateEvent!>!, java.util.concurrent.Executor!);
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class XrExtensions.SceneViewerResult {
    ctor @Deprecated public XrExtensions.SceneViewerResult();
  }

}

package com.android.extensions.xr.asset {

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface AssetToken {
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface EnvironmentToken extends com.android.extensions.xr.asset.AssetToken {
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface GltfAnimation {
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public enum GltfAnimation.State {
    enum_constant @Deprecated public static final com.android.extensions.xr.asset.GltfAnimation.State LOOP;
    enum_constant @Deprecated public static final com.android.extensions.xr.asset.GltfAnimation.State PLAY;
    enum_constant @Deprecated public static final com.android.extensions.xr.asset.GltfAnimation.State STOP;
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface GltfModelToken extends com.android.extensions.xr.asset.AssetToken {
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SceneToken extends com.android.extensions.xr.asset.AssetToken {
  }

}

package com.android.extensions.xr.environment {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class EnvironmentVisibilityState {
    method public int getCurrentState();
    field public static final int APP_VISIBLE = 2; // 0x2
    field public static final int HOME_VISIBLE = 1; // 0x1
    field public static final int INVISIBLE = 0; // 0x0
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class PassthroughVisibilityState {
    method public int getCurrentState();
    method public float getOpacity();
    field public static final int APP = 2; // 0x2
    field public static final int DISABLED = 0; // 0x0
    field public static final int HOME = 1; // 0x1
    field public static final int SYSTEM = 3; // 0x3
  }

}

package com.android.extensions.xr.function {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @java.lang.FunctionalInterface public interface Consumer<T> {
    method public void accept(T!);
  }

}

package com.android.extensions.xr.media {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class AudioManagerExtensions {
    method public void playSoundEffectAsPointSource(android.media.AudioManager!, int, com.android.extensions.xr.media.PointSourceAttributes!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class AudioTrackExtensions {
    method public com.android.extensions.xr.media.PointSourceAttributes! getPointSourceAttributes(android.media.AudioTrack!);
    method public com.android.extensions.xr.media.SoundFieldAttributes! getSoundFieldAttributes(android.media.AudioTrack!);
    method public int getSpatialSourceType(android.media.AudioTrack!);
    method public android.media.AudioTrack.Builder! setPointSourceAttributes(android.media.AudioTrack.Builder!, com.android.extensions.xr.media.PointSourceAttributes!);
    method public android.media.AudioTrack.Builder! setSoundFieldAttributes(android.media.AudioTrack.Builder!, com.android.extensions.xr.media.SoundFieldAttributes!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class MediaPlayerExtensions {
    method public android.media.MediaPlayer! setPointSourceAttributes(android.media.MediaPlayer!, com.android.extensions.xr.media.PointSourceAttributes!);
    method public android.media.MediaPlayer! setSoundFieldAttributes(android.media.MediaPlayer!, com.android.extensions.xr.media.SoundFieldAttributes!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class PointSourceAttributes {
    method public com.android.extensions.xr.node.Node! getNode();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final class PointSourceAttributes.Builder {
    ctor public PointSourceAttributes.Builder();
    method public com.android.extensions.xr.media.PointSourceAttributes! build() throws java.lang.UnsupportedOperationException;
    method public com.android.extensions.xr.media.PointSourceAttributes.Builder! setNode(com.android.extensions.xr.node.Node!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class SoundFieldAttributes {
    method public int getAmbisonicsOrder();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final class SoundFieldAttributes.Builder {
    ctor public SoundFieldAttributes.Builder();
    method public com.android.extensions.xr.media.SoundFieldAttributes! build() throws java.lang.UnsupportedOperationException;
    method public com.android.extensions.xr.media.SoundFieldAttributes.Builder! setAmbisonicsOrder(int);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class SoundPoolExtensions {
    method public int getSpatialSourceType(android.media.SoundPool!, int);
    method public int playAsPointSource(android.media.SoundPool!, int, com.android.extensions.xr.media.PointSourceAttributes!, float, int, int, float);
    method public int playAsSoundField(android.media.SoundPool!, int, com.android.extensions.xr.media.SoundFieldAttributes!, float, int, int, float);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class SpatializerExtensions {
    field public static final int AMBISONICS_ORDER_FIRST_ORDER = 0; // 0x0
    field public static final int AMBISONICS_ORDER_SECOND_ORDER = 1; // 0x1
    field public static final int AMBISONICS_ORDER_THIRD_ORDER = 2; // 0x2
    field public static final int SOURCE_TYPE_BYPASS = 0; // 0x0
    field public static final int SOURCE_TYPE_POINT_SOURCE = 1; // 0x1
    field public static final int SOURCE_TYPE_SOUND_FIELD = 2; // 0x2
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class XrSpatialAudioExtensions {
    method public com.android.extensions.xr.media.AudioManagerExtensions! getAudioManagerExtensions();
    method public com.android.extensions.xr.media.AudioTrackExtensions! getAudioTrackExtensions();
    method public com.android.extensions.xr.media.MediaPlayerExtensions! getMediaPlayerExtensions();
    method public com.android.extensions.xr.media.SoundPoolExtensions! getSoundPoolExtensions();
  }

}

package com.android.extensions.xr.node {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class InputEvent {
    method public int getAction();
    method public com.android.extensions.xr.node.Vec3! getDirection();
    method public int getDispatchFlags();
    method public com.android.extensions.xr.node.InputEvent.HitInfo! getHitInfo();
    method public com.android.extensions.xr.node.Vec3! getOrigin();
    method public int getPointerType();
    method public com.android.extensions.xr.node.InputEvent.HitInfo! getSecondaryHitInfo();
    method public int getSource();
    method public long getTimestamp();
    field public static final int ACTION_CANCEL = 3; // 0x3
    field public static final int ACTION_DOWN = 0; // 0x0
    field public static final int ACTION_HOVER_ENTER = 5; // 0x5
    field public static final int ACTION_HOVER_EXIT = 6; // 0x6
    field public static final int ACTION_HOVER_MOVE = 4; // 0x4
    field public static final int ACTION_MOVE = 2; // 0x2
    field public static final int ACTION_UP = 1; // 0x1
    field public static final int DISPATCH_FLAG_2D = 2; // 0x2
    field public static final int DISPATCH_FLAG_CAPTURED_POINTER = 1; // 0x1
    field public static final int DISPATCH_FLAG_NONE = 0; // 0x0
    field public static final int POINTER_TYPE_DEFAULT = 0; // 0x0
    field public static final int POINTER_TYPE_LEFT = 1; // 0x1
    field public static final int POINTER_TYPE_RIGHT = 2; // 0x2
    field public static final int SOURCE_CONTROLLER = 2; // 0x2
    field public static final int SOURCE_GAZE_AND_GESTURE = 5; // 0x5
    field public static final int SOURCE_HANDS = 3; // 0x3
    field public static final int SOURCE_HEAD = 1; // 0x1
    field public static final int SOURCE_MOUSE = 4; // 0x4
    field public static final int SOURCE_UNKNOWN = 0; // 0x0
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static class InputEvent.HitInfo {
    ctor public InputEvent.HitInfo(int, com.android.extensions.xr.node.Node!, com.android.extensions.xr.node.Mat4f!, com.android.extensions.xr.node.Vec3!);
    method public com.android.extensions.xr.node.Vec3! getHitPosition();
    method public com.android.extensions.xr.node.Node! getInputNode();
    method public int getSubspaceImpressNodeId();
    method public com.android.extensions.xr.node.Mat4f! getTransform();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class Mat4f {
    ctor public Mat4f(float[]!);
    method public float get(int, int);
    method public float[]! getFlattenedMatrix();
    method public void set(int, int, float);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class Node implements android.os.Parcelable {
    method public int describeContents();
    method public void listenForInput(com.android.extensions.xr.function.Consumer<com.android.extensions.xr.node.InputEvent!>!, java.util.concurrent.Executor!);
    method public void requestPointerCapture(com.android.extensions.xr.function.Consumer<java.lang.Integer!>!, java.util.concurrent.Executor!);
    method public void setNonPointerFocusTarget(android.view.AttachedSurfaceControl!);
    method public void stopListeningForInput();
    method public void stopPointerCapture();
    method public java.io.Closeable! subscribeToTransform(com.android.extensions.xr.function.Consumer<com.android.extensions.xr.node.NodeTransform!>!, java.util.concurrent.Executor!);
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final int POINTER_CAPTURE_STATE_ACTIVE = 1; // 0x1
    field public static final int POINTER_CAPTURE_STATE_PAUSED = 0; // 0x0
    field public static final int POINTER_CAPTURE_STATE_STOPPED = 2; // 0x2
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class NodeTransaction implements java.io.Closeable {
    method public void apply();
    method public void close();
    method public com.android.extensions.xr.node.NodeTransaction! disableReform(com.android.extensions.xr.node.Node!);
    method public com.android.extensions.xr.node.NodeTransaction! enableReform(com.android.extensions.xr.node.Node!, com.android.extensions.xr.node.ReformOptions!);
    method public com.android.extensions.xr.node.NodeTransaction! merge(com.android.extensions.xr.node.NodeTransaction!);
    method public com.android.extensions.xr.node.NodeTransaction! removeCornerRadius(com.android.extensions.xr.node.Node!);
    method public com.android.extensions.xr.node.NodeTransaction! setAlpha(com.android.extensions.xr.node.Node!, float);
    method public com.android.extensions.xr.node.NodeTransaction! setAnchorId(com.android.extensions.xr.node.Node!, android.os.IBinder!);
    method public com.android.extensions.xr.node.NodeTransaction! setCornerRadius(com.android.extensions.xr.node.Node!, float);
    method @Deprecated public com.android.extensions.xr.node.NodeTransaction! setCurvature(com.android.extensions.xr.node.Node!, float);
    method @Deprecated public com.android.extensions.xr.node.NodeTransaction! setEnvironment(com.android.extensions.xr.node.Node!, com.android.extensions.xr.asset.EnvironmentToken!);
    method @Deprecated public com.android.extensions.xr.node.NodeTransaction! setGltfAnimation(com.android.extensions.xr.node.Node!, String!, com.android.extensions.xr.asset.GltfAnimation.State!);
    method @Deprecated public com.android.extensions.xr.node.NodeTransaction! setGltfModel(com.android.extensions.xr.node.Node!, com.android.extensions.xr.asset.GltfModelToken!);
    method @Deprecated public com.android.extensions.xr.node.NodeTransaction! setImpressScene(com.android.extensions.xr.node.Node!, com.android.extensions.xr.asset.SceneToken!);
    method public com.android.extensions.xr.node.NodeTransaction! setName(com.android.extensions.xr.node.Node!, String!);
    method public com.android.extensions.xr.node.NodeTransaction! setOrientation(com.android.extensions.xr.node.Node!, float, float, float, float);
    method public com.android.extensions.xr.node.NodeTransaction! setParent(com.android.extensions.xr.node.Node!, com.android.extensions.xr.node.Node!);
    method public com.android.extensions.xr.node.NodeTransaction! setPassthroughState(com.android.extensions.xr.node.Node!, float, int);
    method public com.android.extensions.xr.node.NodeTransaction! setPixelPositioning(com.android.extensions.xr.node.Node!, int);
    method public com.android.extensions.xr.node.NodeTransaction! setPixelResolution(com.android.extensions.xr.node.Node!, float);
    method public com.android.extensions.xr.node.NodeTransaction! setPosition(com.android.extensions.xr.node.Node!, float, float, float);
    method public com.android.extensions.xr.node.NodeTransaction! setReformSize(com.android.extensions.xr.node.Node!, com.android.extensions.xr.node.Vec3!);
    method public com.android.extensions.xr.node.NodeTransaction! setScale(com.android.extensions.xr.node.Node!, float, float, float);
    method public com.android.extensions.xr.node.NodeTransaction! setSubspace(com.android.extensions.xr.node.Node!, com.android.extensions.xr.subspace.Subspace!);
    method public com.android.extensions.xr.node.NodeTransaction! setSurfaceControl(com.android.extensions.xr.node.Node!, android.view.SurfaceControl!);
    method public com.android.extensions.xr.node.NodeTransaction! setSurfacePackage(com.android.extensions.xr.node.Node!, android.view.SurfaceControlViewHost.SurfacePackage!);
    method public com.android.extensions.xr.node.NodeTransaction! setVisibility(com.android.extensions.xr.node.Node!, boolean);
    method public com.android.extensions.xr.node.NodeTransaction! setWindowBounds(android.view.SurfaceControl!, int, int);
    method public com.android.extensions.xr.node.NodeTransaction! setWindowBounds(android.view.SurfaceControlViewHost.SurfacePackage!, int, int);
    field public static final int POSITION_FROM_PARENT_TOP_LEFT = 64; // 0x40
    field public static final int X_POSITION_IN_PIXELS = 1; // 0x1
    field public static final int Y_POSITION_IN_PIXELS = 2; // 0x2
    field public static final int Z_POSITION_IN_PIXELS = 4; // 0x4
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class NodeTransform {
    method public long getTimestamp();
    method public com.android.extensions.xr.node.Mat4f! getTransform();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class Quatf {
    ctor public Quatf(float, float, float, float);
    field public final float w;
    field public final float x;
    field public final float y;
    field public final float z;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class ReformEvent {
    method public com.android.extensions.xr.node.Vec3! getCurrentRayDirection();
    method public com.android.extensions.xr.node.Vec3! getCurrentRayOrigin();
    method public int getId();
    method public com.android.extensions.xr.node.Vec3! getInitialRayDirection();
    method public com.android.extensions.xr.node.Vec3! getInitialRayOrigin();
    method public com.android.extensions.xr.node.Quatf! getProposedOrientation();
    method public com.android.extensions.xr.node.Vec3! getProposedPosition();
    method public com.android.extensions.xr.node.Vec3! getProposedScale();
    method public com.android.extensions.xr.node.Vec3! getProposedSize();
    method public int getState();
    method public int getType();
    field public static final int REFORM_STATE_END = 3; // 0x3
    field public static final int REFORM_STATE_ONGOING = 2; // 0x2
    field public static final int REFORM_STATE_START = 1; // 0x1
    field public static final int REFORM_STATE_UNKNOWN = 0; // 0x0
    field public static final int REFORM_TYPE_MOVE = 1; // 0x1
    field public static final int REFORM_TYPE_RESIZE = 2; // 0x2
    field public static final int REFORM_TYPE_UNKNOWN = 0; // 0x0
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class ReformOptions {
    method public com.android.extensions.xr.node.Vec3! getCurrentSize();
    method public int getEnabledReform();
    method public com.android.extensions.xr.function.Consumer<com.android.extensions.xr.node.ReformEvent!>! getEventCallback();
    method public java.util.concurrent.Executor! getEventExecutor();
    method public float getFixedAspectRatio();
    method public int getFlags();
    method public boolean getForceShowResizeOverlay();
    method public com.android.extensions.xr.node.Vec3! getMaximumSize();
    method public com.android.extensions.xr.node.Vec3! getMinimumSize();
    method public int getScaleWithDistanceMode();
    method public com.android.extensions.xr.node.ReformOptions! setCurrentSize(com.android.extensions.xr.node.Vec3!);
    method public com.android.extensions.xr.node.ReformOptions! setEnabledReform(int);
    method public com.android.extensions.xr.node.ReformOptions! setEventCallback(com.android.extensions.xr.function.Consumer<com.android.extensions.xr.node.ReformEvent!>!);
    method public com.android.extensions.xr.node.ReformOptions! setEventExecutor(java.util.concurrent.Executor!);
    method public com.android.extensions.xr.node.ReformOptions! setFixedAspectRatio(float);
    method public com.android.extensions.xr.node.ReformOptions! setFlags(int);
    method public com.android.extensions.xr.node.ReformOptions! setForceShowResizeOverlay(boolean);
    method public com.android.extensions.xr.node.ReformOptions! setMaximumSize(com.android.extensions.xr.node.Vec3!);
    method public com.android.extensions.xr.node.ReformOptions! setMinimumSize(com.android.extensions.xr.node.Vec3!);
    method public com.android.extensions.xr.node.ReformOptions! setScaleWithDistanceMode(int);
    field public static final int ALLOW_MOVE = 1; // 0x1
    field public static final int ALLOW_RESIZE = 2; // 0x2
    field public static final int FLAG_ALLOW_SYSTEM_MOVEMENT = 2; // 0x2
    field public static final int FLAG_POSE_RELATIVE_TO_PARENT = 4; // 0x4
    field public static final int FLAG_SCALE_WITH_DISTANCE = 1; // 0x1
    field public static final int SCALE_WITH_DISTANCE_MODE_DEFAULT = 3; // 0x3
    field public static final int SCALE_WITH_DISTANCE_MODE_DMM = 2; // 0x2
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class Vec3 {
    ctor public Vec3(float, float, float);
    field public final float x;
    field public final float y;
    field public final float z;
  }

}

package com.android.extensions.xr.passthrough {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class PassthroughState {
    field public static final int PASSTHROUGH_MODE_MAX = 1; // 0x1
    field public static final int PASSTHROUGH_MODE_MIN = 2; // 0x2
    field public static final int PASSTHROUGH_MODE_OFF = 0; // 0x0
  }

}

package com.android.extensions.xr.space {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class ActivityPanel {
    method public void delete();
    method public com.android.extensions.xr.node.Node! getNode();
    method public void launchActivity(android.content.Intent!, android.os.Bundle!);
    method public void moveActivity(android.app.Activity!);
    method public void setWindowBounds(android.graphics.Rect!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ActivityPanelLaunchParameters {
    ctor public ActivityPanelLaunchParameters(android.graphics.Rect!);
    method public android.graphics.Rect! getWindowBounds();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class Bounds {
    ctor public Bounds(float, float, float);
    method public float getDepth();
    method public float getHeight();
    method public float getWidth();
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class BoundsChangeEvent implements com.android.extensions.xr.space.SpatialStateEvent {
    ctor @Deprecated public BoundsChangeEvent(com.android.extensions.xr.space.Bounds!);
    method @Deprecated public com.android.extensions.xr.space.Bounds! getBounds();
    method @Deprecated public float getDepth();
    method @Deprecated public float getHeight();
    method @Deprecated public float getWidth();
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class EnvironmentControlChangeEvent implements com.android.extensions.xr.space.SpatialStateEvent {
    ctor @Deprecated public EnvironmentControlChangeEvent(boolean);
    method @Deprecated public boolean getEnvironmentControlAllowed();
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class EnvironmentVisibilityChangeEvent implements com.android.extensions.xr.space.SpatialStateEvent {
    ctor @Deprecated public EnvironmentVisibilityChangeEvent(int);
    method @Deprecated public int getEnvironmentState();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class HitTestResult {
    method public float getDistance();
    method public com.android.extensions.xr.node.Vec3! getHitPosition();
    method public com.android.extensions.xr.node.Vec3! getSurfaceNormal();
    method public int getSurfaceType();
    method public boolean getVirtualEnvironmentIsVisible();
    field public static final int SURFACE_3D_OBJECT = 2; // 0x2
    field public static final int SURFACE_PANEL = 1; // 0x1
    field public static final int SURFACE_UNKNOWN = 0; // 0x0
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final class HitTestResult.Builder {
    ctor public HitTestResult.Builder(float, com.android.extensions.xr.node.Vec3!, boolean, int);
    method public com.android.extensions.xr.space.HitTestResult! build();
    method public com.android.extensions.xr.space.HitTestResult.Builder! setSurfaceNormal(com.android.extensions.xr.node.Vec3!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class SpatialCapabilities {
    ctor public SpatialCapabilities();
    method public boolean get(int);
    field public static final int APP_ENVIRONMENTS_CAPABLE = 3; // 0x3
    field public static final int PASSTHROUGH_CONTROL_CAPABLE = 2; // 0x2
    field public static final int SPATIAL_3D_CONTENTS_CAPABLE = 1; // 0x1
    field public static final int SPATIAL_ACTIVITY_EMBEDDING_CAPABLE = 5; // 0x5
    field public static final int SPATIAL_AUDIO_CAPABLE = 4; // 0x4
    field public static final int SPATIAL_UI_CAPABLE = 0; // 0x0
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SpatialCapabilityChangeEvent implements com.android.extensions.xr.space.SpatialStateEvent {
    ctor @Deprecated public SpatialCapabilityChangeEvent(com.android.extensions.xr.space.SpatialCapabilities!);
    method @Deprecated public com.android.extensions.xr.space.SpatialCapabilities! getCurrentCapabilities();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class SpatialState {
    method public com.android.extensions.xr.space.Bounds! getBounds();
    method public com.android.extensions.xr.environment.EnvironmentVisibilityState! getEnvironmentVisibility();
    method public android.util.Size! getMainWindowSize();
    method public com.android.extensions.xr.environment.PassthroughVisibilityState! getPassthroughVisibility();
    method public float getPreferredAspectRatio();
    method public com.android.extensions.xr.space.SpatialCapabilities! getSpatialCapabilities();
    method public boolean isActiveEnvironmentNode(com.android.extensions.xr.node.Node!);
    method public boolean isActiveSceneNode(com.android.extensions.xr.node.Node!);
    method public boolean isActiveWindowLeashNode(com.android.extensions.xr.node.Node!);
    method public boolean isEnvironmentInherited();
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SpatialStateEvent {
  }

}

package com.android.extensions.xr.splitengine {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class SplitEngineBridge {
    method public long getNativeHandle();
  }

}

package com.android.extensions.xr.subspace {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class Subspace {
  }

}

